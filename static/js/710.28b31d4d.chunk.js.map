{"version":3,"file":"static/js/710.28b31d4d.chunk.js","mappings":"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","sources":["components/ContactBook/contactBook.module.css","components/ContactBook/ContactBook.jsx","components/Filter/Filter.jsx","components/Form/Form.jsx","redux/filter/selectors.js","redux/items/selectors.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import PropTypes from 'prop-types';\n\nimport style from './contactBook.module.css';\n\nconst ContactBook = ({ contacts, removeContact }) => {\n  const elements =\n    contacts &&\n    contacts.map(({ name, number, id }) => {\n      return (\n        <li className={style.item} key={id}>\n          <p>\n            {name}: {number}\n          </p>\n          <button\n            type=\"button\"\n            className={style.btn}\n            onClick={() => removeContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      );\n    });\n\n  return <ul>{elements}</ul>;\n};\n\nexport default ContactBook;\n\nContactBook.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  removeContact: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <>\n      <label htmlFor=\"filter\">Find Contact By Name</label>\n      <input value={value} name=\"filter\" type=\"text\" onChange={onChange} />\n    </>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nconst Form = ({ onSubmit }) => {\n  const [state, setState] = useState({ name: '', number: '' });\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    onSubmit({ ...state });\n    setState({ name: '', number: '' });\n  };\n\n  const handleChange = ({ target }) => {\n    const { value, name } = target;\n    setState({\n      ...state,\n      [name]: value,\n    });\n  };\n\n  const { name, number } = state;\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor={name}>Name</label>\n        <input\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <label htmlFor={number}>Number</label>\n        <input\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <button type=\"submit\">Add Contact</button>\n      </form>\n    </div>\n  );\n};\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","export const getFilter = ({ filter }) => filter;\r\n","export const getItems = state => state.contacts.items;\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  fetchContacts,\n  addContact,\n  removeContact,\n} from 'redux/items/items-operations';\nimport { useEffect } from 'react';\n\nimport { setFilter } from 'redux/filter/filter-action';\n\nimport ContactBook from '../../components/ContactBook/ContactBook';\nimport Filter from '../../components/Filter/Filter';\nimport Form from '../../components/Form/Form';\n\nimport { getFilter } from 'redux/filter/selectors';\nimport { getItems } from 'redux/items/selectors';\n\nconst Contacts = () => {\n  const getState = ({ contacts }) => ({\n    loading: contacts.loading,\n    error: contacts.error,\n  });\n\n  const contacts = useSelector(getItems);\n  const filter = useSelector(getFilter);\n  const { loading, error } = useSelector(getState);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onAddContact = data => {\n    const action = addContact(data);\n    dispatch(action);\n  };\n\n  const onRemoveContact = id => {\n    dispatch(removeContact(id));\n  };\n\n  const getFiltredContacts = () => {\n    const normalizeFilter = filter?.toLowerCase();\n    const filterContacts = contacts?.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n    return filterContacts;\n  };\n\n  const filtredArray = getFiltredContacts();\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Form onSubmit={onAddContact} />\n      <h2>Contacts</h2>\n      <Filter\n        value={filter}\n        onChange={event => dispatch(setFilter(event.currentTarget.value))}\n      />\n      {error && <p>Не удалось загрузить контакты! </p>}\n      {loading ? (\n        <p>...Loadind</p>\n      ) : (\n        <ContactBook contacts={filtredArray} removeContact={onRemoveContact} />\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["contacts","removeContact","elements","map","name","number","id","className","style","type","onClick","value","onChange","htmlFor","onSubmit","useState","state","setState","handleChange","target","event","preventDefault","pattern","title","required","getFilter","filter","getItems","items","useSelector","loading","error","dispatch","useDispatch","useEffect","fetchContacts","filtredArray","normalizeFilter","toLowerCase","contact","includes","getFiltredContacts","data","action","addContact","setFilter","currentTarget"],"sourceRoot":""}